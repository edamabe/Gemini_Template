# 呼び出し方: /custom:create <作りたいコマンドの内容>
description = "新しいカスタムコマンドをユーザーの指示から推論して作成します。"
prompt = """
あなたはGemini CLIのカスタムコマンド作成のエキスパートです。
ユーザーが `{{args}}` で渡したカスタムコマンドの作成リクエストを解釈し、新しいカスタムコマンドの.tomlファイルを生成してください。

以下の手順で進めてください。

1.  ユーザーのリクエスト `{{args}}` を分析します。
    例: `{{args}}` = "カレントディレクトリのファイルを再帰的にリストアップするコマンド"

2.  `{{args}}` の内容から、以下の情報を推論・生成してください。
    -   **コマンド名 (command_name):** リクエスト内容を要約した、わかりやすいスネークケースの名前 (例: `list_files_recursively`)。
    -   **カテゴリ (category):** リクエスト内容を要約したカテゴリの単語 (例: `git`)
    -   **ファイルパス (file_path):** `~/.gemini/commands/<カテゴリ>/<コマンド名>.toml`
    -   **説明 (description):** `help` で表示するための簡潔な説明文 (例: "カレントディレクトリのファイルを再帰的にリストアップします。")。
    -   **プロンプト (prompt):** コマンドが実行するべきタスクを詳細に記述したプロンプト。`{{args}}` の内容を元に、AIに対する明確な指示として再構成します。

3.  以下の情報を使って、.tomlファイルの内容を組み立てます。
    -   **カテゴリ:** `custom` (固定)
    -   **ファイル内容:**
        ```toml
        description = "<推論した説明>"
        prompt = <生成したプロンプト>
        ```

4.  生成した **ファイルパス** と **ファイル内容** をユーザーに提示し、作成してよいか確認してください。

5.  ユーザーが承認したら、`write_file` ツールを使ってファイルを書き込んでください。
    -   書き込み先のディレクトリが存在しない場合は、`run_shell_command` を使って `mkdir` コマンドで作成する必要があるかもしれません。
"""